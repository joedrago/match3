(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Match;

Match = (function() {
  function Match() {
    this.game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'phaser-example', {
      preload: (function(_this) {
        return function() {
          return _this.preload();
        };
      })(this),
      create: (function(_this) {
        return function() {
          return _this.create();
        };
      })(this),
      update: (function(_this) {
        return function() {
          return _this.update();
        };
      })(this)
    });
    this.gridCX = 8;
    this.gridCY = 7;
  }

  Match.prototype.preload = function() {
    console.log("Match.preload()");
    return this.game.load.spritesheet('gems', 'img/gems.png', 80, 80, -1, 4, 4);
  };

  Match.prototype.create = function() {
    console.log("Match.create(): " + window.innerWidth + "x" + window.innerHeight);
    this.screenW = window.innerWidth;
    this.screenH = window.innerHeight;
    if (this.screenW > this.screenH) {
      this.screenW = Math.floor(this.screenH / 16 * 9);
    }
    console.log("created screen " + this.screenW + "x" + this.screenH);
    this.gemSize = this.screenW / this.gridCX;
    this.gridW = this.gemSize * this.gridCX;
    this.gridH = this.gemSize * this.gridCY;
    this.gridX = 0;
    this.gridY = ((this.screenH - (this.gemSize * this.gridCY)) - this.gemSize) >> 1;
    this.game.input.onDown.add((function(_this) {
      return function(p) {
        return _this.onDown(p);
      };
    })(this));
    this.game.input.onUp.add((function(_this) {
      return function(p) {
        return _this.onUp(p);
      };
    })(this));
    return this.newGame();
  };

  Match.prototype.newGame = function() {
    var i, j, k, l, m, n, ref, ref1, ref2, ref3;
    this.dragStartX = null;
    this.dragStartY = null;
    if (this.grid) {
      for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = this.gridCY; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          if (this.grid[i][j]) {
            this.grid[i][j].sprite.destroy();
          }
        }
      }
    }
    this.grid = Array(this.gridCX);
    for (i = m = 0, ref2 = this.gridCX; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
      this.grid[i] = Array(this.gridCY);
      for (j = n = 0, ref3 = this.gridCY; 0 <= ref3 ? n < ref3 : n > ref3; j = 0 <= ref3 ? ++n : --n) {
        this.grid[i][j] = null;
      }
    }
    return this.spawnGems();
  };

  Match.prototype.update = function() {};

  Match.prototype.screenToGrid = function(x, y, nearest) {
    var g;
    if (nearest == null) {
      nearest = false;
    }
    g = {
      x: Math.floor((x - this.gridX) / this.gemSize),
      y: Math.floor((y - this.gridY) / this.gemSize)
    };
    if (nearest) {
      g.x = Math.max(g.x, 0);
      g.x = Math.min(g.x, this.gridCX - 1);
      g.y = Math.max(g.y, 0);
      g.y = Math.min(g.y, this.gridCY - 1);
    } else if ((g.x < 0) || (g.x >= this.gridCX) || (g.y < 0) || (g.y >= this.gridCY)) {
      return null;
    }
    return g;
  };

  Match.prototype.gridToScreen = function(x, y) {
    var p;
    console.log;
    p = {
      x: Math.floor(x * this.gemSize) + this.gridX,
      y: Math.floor(y * this.gemSize) + this.gridY
    };
    return p;
  };

  Match.prototype.swapChain = function(startX, startY, endX, endY, dragging) {
    var deltaX, deltaY, newX, newY, results, temp, x, y;
    if (dragging == null) {
      dragging = false;
    }
    x = startX;
    y = startY;
    deltaX = endX - x;
    deltaY = endY - y;
    deltaX = Math.max(deltaX, -1);
    deltaX = Math.min(deltaX, 1);
    deltaY = Math.max(deltaY, -1);
    deltaY = Math.min(deltaY, 1);
    results = [];
    while ((x !== endX) || (y !== endY)) {
      newX = x + deltaX;
      newY = y + deltaY;
      temp = this.grid[x][y];
      this.grid[x][y] = this.grid[newX][newY];
      this.grid[newX][newY] = temp;
      if (this.grid[x][y] !== null) {
        this.grid[x][y].x = x;
        this.grid[x][y].y = y;
      }
      if (this.grid[newX][newY] !== null) {
        this.grid[newX][newY].x = newX;
        this.grid[newX][newY].y = newY;
      }
      this.moveGemHome(x, y);
      if (!dragging) {
        this.moveGemHome(newX, newY);
      }
      x = newX;
      results.push(y = newY);
    }
    return results;
  };

  Match.prototype.onDown = function(p) {
    var g, sprite;
    g = this.screenToGrid(p.x, p.y);
    if (g === null) {
      console.log("bad coord");
      return;
    }
    if (this.grid[g.x][g.y] !== null) {
      console.log("enabling drag on " + g.x + " " + g.y);
      sprite = this.grid[g.x][g.y].sprite;
      sprite.input.enableDrag(true);
      sprite.events.onDragUpdate.add((function(_this) {
        return function(sprite, pointer, dragX, dragY, snapPoint) {
          return _this.onOver(Math.floor(dragX + (_this.gemSize / 2)), Math.floor(dragY + (_this.gemSize / 2)));
        };
      })(this));
      this.dragStartX = this.dragX = g.x;
      return this.dragStartY = this.dragY = g.y;
    }
  };

  Match.prototype.onOver = function(x, y) {
    var deltaX, deltaY, g;
    if ((this.dragStartX === null) || (this.dragStartY === null)) {
      return;
    }
    g = this.screenToGrid(x, y, true);
    deltaX = Math.abs(g.x - this.dragStartX);
    deltaY = Math.abs(g.y - this.dragStartY);
    if ((deltaX === 0) && (deltaY === 0)) {
      return;
    }
    if (deltaX < deltaY) {
      g.x = this.dragStartX;
      if (this.dragX !== this.dragStartX) {
        console.log("rewinding drag X " + deltaX + " " + deltaY);
        this.rewindDrag(true);
      }
    } else {
      g.y = this.dragStartY;
      if (this.dragY !== this.dragStartY) {
        console.log("rewinding drag Y " + deltaX + " " + deltaY);
        this.rewindDrag(true);
      }
    }
    this.swapChain(this.dragX, this.dragY, g.x, g.y, true);
    this.dragX = g.x;
    return this.dragY = g.y;
  };

  Match.prototype.onUp = function(p) {
    this.rewindDrag();
    return this.finishDrag();
  };

  Match.prototype.finishDrag = function() {
    if ((this.dragX !== null) && (this.dragY !== null) && (this.grid[this.dragX][this.dragY] !== null)) {
      this.grid[this.dragX][this.dragY].sprite.input.enableDrag(false);
      this.grid[this.dragX][this.dragY].sprite.events.onDragUpdate.removeAll();
    }
    this.dragStartX = this.dragX = null;
    return this.dragStartY = this.dragY = null;
  };

  Match.prototype.rewindDrag = function(dragging) {
    if (dragging == null) {
      dragging = false;
    }
    if ((this.dragStartX !== null) && (this.dragStartY !== null)) {
      console.log("moving (" + this.dragX + ", " + this.dragY + ") home (" + this.dragStartX + ", " + this.dragStartY + ")");
      this.swapChain(this.dragX, this.dragY, this.dragStartX, this.dragStartY, dragging);
      if (!dragging) {
        this.moveGemHome(this.dragStartX, this.dragStartY);
      }
      this.dragX = this.dragStartX;
      return this.dragY = this.dragStartY;
    }
  };

  Match.prototype.breakGem = function(x, y) {
    console.log("breakGem(" + x + ", " + y + ")");
    if (this.grid[x][y] !== null) {
      this.grid[x][y].sprite.destroy();
      this.grid[x][y] = null;
    }
    if ((x > 0) && (this.grid[x - 1][y] !== null)) {
      this.grid[x - 1][y].sprite.destroy();
      this.grid[x - 1][y] = null;
    }
    if ((x < this.gridCX - 1) && (this.grid[x + 1][y] !== null)) {
      this.grid[x + 1][y].sprite.destroy();
      return this.grid[x + 1][y] = null;
    }
  };

  Match.prototype.gemArtIndex = function(type, highlight, power) {
    var index;
    if (highlight == null) {
      highlight = false;
    }
    if (power == null) {
      power = 0;
    }
    index = (function() {
      switch (type) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          return type;
        case 5:
        case 6:
        case 7:
          return 7 + (3 * (type - 5));
      }
    })();
    if (highlight) {
      index += 16;
    }
    index += power;
    return index;
  };

  Match.prototype.emitScoreParticle = function(gridX, gridY, type, score) {
    var p, style, text;
    p = this.gridToScreen(gridX, gridY);
    style = {
      font: "bold 16px Arial",
      fill: "#fff",
      boundsAlignH: "center",
      boundsAlignV: "middle"
    };
    text = this.game.add.text(p.x, p.y, "" + score, style);
    text.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);
    text.setTextBounds(0, 0, this.gemSize, this.gemSize);
    this.game.add.tween(text).to({
      y: p.y - (this.gemSize / 4),
      alpha: 0
    }, 1000, Phaser.Easing.Quartic.In, true);
    this.game.add.tween(text.scale).to({
      x: 2,
      y: 2
    }, 1000, Phaser.Easing.Linear.None, true);
    return this.game.time.events.add(1000, function() {
      return text.destroy();
    });
  };

  Match.prototype.bestGemToSpawn = function() {
    return Math.floor(Math.random() * 8);
  };

  Match.prototype.moveGemHome = function(gx, gy, bounce) {
    var easing, gem, speed, x, y;
    if (bounce == null) {
      bounce = false;
    }
    gem = this.grid[gx][gy];
    if (gem === null) {
      return;
    }
    x = this.gridX + (gx * this.gemSize);
    y = this.gridY + (gy * this.gemSize);
    easing = Phaser.Easing.Linear.None;
    speed = 100;
    if (bounce) {
      easing = Phaser.Easing.Bounce.Out;
      speed = 400;
    }
    return this.game.add.tween(gem.sprite).to({
      x: x,
      y: y
    }, speed, easing, true);
  };

  Match.prototype.spawnGems = function() {
    var gem, gemType, i, j, k, l, m, n, newGrid, newIndex, oldIndex, ref, ref1, ref2, ref3, results, sprite, x, y;
    newGrid = Array(this.gridCX);
    for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      newGrid[i] = Array(this.gridCY);
      oldIndex = newIndex = this.gridCY - 1;
      while (oldIndex >= 0) {
        if (this.grid[i][oldIndex] !== null) {
          newGrid[i][newIndex] = this.grid[i][oldIndex];
          newIndex -= 1;
        }
        oldIndex -= 1;
      }
      while (newIndex >= 0) {
        newGrid[i][newIndex] = null;
        newIndex -= 1;
      }
    }
    this.grid = newGrid;
    for (i = l = 0, ref1 = this.gridCX; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      for (j = m = 0, ref2 = this.gridCY; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {
        gem = this.grid[i][j];
        if (gem === null) {
          continue;
        }
        if ((gem.x !== i) || (gem.y !== j)) {
          gem.x = i;
          gem.y = j;
          this.moveGemHome(i, j, true);
        }
      }
    }
    results = [];
    for (i = n = 0, ref3 = this.gridCX; 0 <= ref3 ? n < ref3 : n > ref3; i = 0 <= ref3 ? ++n : --n) {
      results.push((function() {
        var o, ref4, results1;
        results1 = [];
        for (j = o = 0, ref4 = this.gridCY; 0 <= ref4 ? o < ref4 : o > ref4; j = 0 <= ref4 ? ++o : --o) {
          if (this.grid[i][j] === null) {
            gemType = this.bestGemToSpawn();
            x = this.gridX + (i * this.gemSize);
            y = this.gridY + (j * this.gemSize);
            sprite = this.game.add.sprite(x, y - this.gridH, 'gems', this.gemArtIndex(gemType, false));
            sprite.width = this.gemSize;
            sprite.height = this.gemSize;
            sprite.inputEnabled = true;
            this.game.world.sendToBack(sprite);
            this.game.add.tween(sprite).to({
              y: y
            }, 400, Phaser.Easing.Bounce.Out, true);
            results1.push(this.grid[i][j] = {
              x: i,
              y: j,
              type: gemType,
              sprite: sprite
            });
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return Match;

})();

module.exports = Match;


},{}],2:[function(require,module,exports){
var Match, init, onDeviceReady;

Match = require('./Match');

onDeviceReady = function() {
  console.log('deviceready');
  return window.match = new Match;
};

init = function() {
  console.log("init");
  return document.addEventListener('deviceready', onDeviceReady, false);
};

init();


},{"./Match":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
