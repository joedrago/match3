(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Match;

Match = (function() {
  function Match() {
    this.game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'phaser-example', {
      preload: (function(_this) {
        return function() {
          return _this.preload();
        };
      })(this),
      create: (function(_this) {
        return function() {
          return _this.create();
        };
      })(this),
      update: (function(_this) {
        return function() {
          return _this.update();
        };
      })(this)
    });
    this.gridCX = 8;
    this.gridCY = 7;
  }

  Match.prototype.preload = function() {
    console.log("Match.preload()");
    return this.game.load.spritesheet('gems', 'img/gems.png', 80, 80, -1, 4, 4);
  };

  Match.prototype.create = function() {
    console.log("Match.create(): " + window.innerWidth + "x" + window.innerHeight);
    this.game.input.onDown.add((function(_this) {
      return function(p) {
        return _this.onDown(p);
      };
    })(this));
    this.game.input.onUp.add((function(_this) {
      return function(p) {
        return _this.onUp(p);
      };
    })(this));
    this.screenW = window.innerWidth;
    this.screenH = window.innerHeight;
    this.gemSize = this.screenW / this.gridCX;
    this.gridW = this.gemSize * this.gridCX;
    this.gridH = this.gemSize * this.gridCY;
    this.gridX = 0;
    this.gridY = ((this.screenH - (this.gemSize * this.gridCY)) - this.gemSize) >> 1;
    return this.newGame();
  };

  Match.prototype.newGame = function() {
    var i, j, k, l, m, n, ref, ref1, ref2, ref3;
    if (this.grid) {
      for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = this.gridCY; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          if (this.grid[i][j]) {
            this.grid[i][j].sprite.destroy();
          }
        }
      }
    }
    this.grid = Array(this.gridCX);
    for (i = m = 0, ref2 = this.gridCX; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
      this.grid[i] = Array(this.gridCY);
      for (j = n = 0, ref3 = this.gridCY; 0 <= ref3 ? n < ref3 : n > ref3; j = 0 <= ref3 ? ++n : --n) {
        this.grid[i][j] = null;
      }
    }
    return this.spawnGems();
  };

  Match.prototype.update = function() {};

  Match.prototype.screenToGrid = function(x, y) {
    var g;
    g = {
      x: Math.floor((x - this.gridX) / this.gemSize),
      y: Math.floor((y - this.gridY) / this.gemSize)
    };
    if ((g.x < 0) || (g.x >= this.gridCX) || (g.y < 0) || (g.y >= this.gridCY)) {
      return null;
    }
    return g;
  };

  Match.prototype.gridToScreen = function(x, y) {
    var p;
    console.log;
    p = {
      x: Math.floor(x * this.gemSize) + this.gridX,
      y: Math.floor(y * this.gemSize) + this.gridY
    };
    return p;
  };

  Match.prototype.onDown = function(p) {
    var g;
    g = this.screenToGrid(p.x, p.y);
    if (g !== null) {
      this.emitScoreParticle(g.x, g.y, 0, 100);
      this.breakGem(g.x, g.y);
      return this.spawnGems();
    } else {
      return console.log("bad coord");
    }
  };

  Match.prototype.onUp = function(p) {};

  Match.prototype.breakGem = function(x, y) {
    console.log("breakGem(" + x + ", " + y + ")");
    if (this.grid[x][y] !== null) {
      this.grid[x][y].sprite.destroy();
      this.grid[x][y] = null;
    }
    if ((x > 0) && (this.grid[x - 1][y] !== null)) {
      this.grid[x - 1][y].sprite.destroy();
      this.grid[x - 1][y] = null;
    }
    if ((x < this.gridCX - 1) && (this.grid[x + 1][y] !== null)) {
      this.grid[x + 1][y].sprite.destroy();
      return this.grid[x + 1][y] = null;
    }
  };

  Match.prototype.gemArtIndex = function(type, highlight, power) {
    var index;
    if (highlight == null) {
      highlight = false;
    }
    if (power == null) {
      power = 0;
    }
    index = (function() {
      switch (type) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          return type;
        case 5:
        case 6:
        case 7:
          return 7 + (3 * (type - 5));
      }
    })();
    if (highlight) {
      index += 16;
    }
    index += power;
    return index;
  };

  Match.prototype.emitScoreParticle = function(gridX, gridY, type, score) {
    var p, style, text;
    p = this.gridToScreen(gridX, gridY);
    style = {
      font: "bold 16px Arial",
      fill: "#fff",
      boundsAlignH: "center",
      boundsAlignV: "middle"
    };
    text = this.game.add.text(p.x, p.y, "" + score, style);
    text.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);
    text.setTextBounds(0, 0, this.gemSize, this.gemSize);
    this.game.add.tween(text).to({
      y: p.y - (this.gemSize / 4),
      alpha: 0
    }, 1000, Phaser.Easing.Quartic.In, true);
    this.game.add.tween(text.scale).to({
      x: 2,
      y: 2
    }, 1000, Phaser.Easing.Linear.None, true);
    return this.game.time.events.add(1000, function() {
      return text.destroy();
    });
  };

  Match.prototype.bestGemToSpawn = function() {
    return Math.floor(Math.random() * 8);
  };

  Match.prototype.spawnGems = function() {
    var gem, gemType, i, j, k, l, m, n, newGrid, newIndex, oldIndex, ref, ref1, ref2, ref3, results, sprite, x, y;
    newGrid = Array(this.gridCX);
    for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      newGrid[i] = Array(this.gridCY);
      oldIndex = newIndex = this.gridCY - 1;
      while (oldIndex >= 0) {
        if (this.grid[i][oldIndex] !== null) {
          newGrid[i][newIndex] = this.grid[i][oldIndex];
          newIndex -= 1;
        }
        oldIndex -= 1;
      }
      while (newIndex >= 0) {
        newGrid[i][newIndex] = null;
        newIndex -= 1;
      }
    }
    this.grid = newGrid;
    for (i = l = 0, ref1 = this.gridCX; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      for (j = m = 0, ref2 = this.gridCY; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {
        gem = this.grid[i][j];
        if (gem === null) {
          continue;
        }
        if ((gem.x !== i) || (gem.y !== j)) {
          x = this.gridX + (i * this.gemSize);
          y = this.gridY + (j * this.gemSize);
          this.game.add.tween(gem.sprite).to({
            x: x,
            y: y
          }, 400, Phaser.Easing.Bounce.Out, true);
          gem.x = i;
          gem.y = j;
        }
      }
    }
    results = [];
    for (i = n = 0, ref3 = this.gridCX; 0 <= ref3 ? n < ref3 : n > ref3; i = 0 <= ref3 ? ++n : --n) {
      results.push((function() {
        var o, ref4, results1;
        results1 = [];
        for (j = o = 0, ref4 = this.gridCY; 0 <= ref4 ? o < ref4 : o > ref4; j = 0 <= ref4 ? ++o : --o) {
          if (this.grid[i][j] === null) {
            gemType = this.bestGemToSpawn();
            x = this.gridX + (i * this.gemSize);
            y = this.gridY + (j * this.gemSize);
            sprite = this.game.add.sprite(x, y - this.gridH, 'gems', this.gemArtIndex(gemType, false));
            sprite.width = this.gemSize;
            sprite.height = this.gemSize;
            this.game.world.sendToBack(sprite);
            this.game.add.tween(sprite).to({
              y: y
            }, 400, Phaser.Easing.Bounce.Out, true);
            results1.push(this.grid[i][j] = {
              x: i,
              y: j,
              type: gemType,
              sprite: sprite
            });
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return Match;

})();

module.exports = Match;


},{}],2:[function(require,module,exports){
var Match, init, onDeviceReady;

Match = require('./Match');

onDeviceReady = function() {
  console.log('deviceready');
  return window.match = new Match;
};

init = function() {
  console.log("init");
  return document.addEventListener('deviceready', onDeviceReady, false);
};

init();


},{"./Match":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJ3d3dcXHNyY1xcTWF0Y2guY29mZmVlIiwid3d3XFxzcmNcXG1haW4uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQTs7QUFBTTtFQUNTLGVBQUE7SUFDWCxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFaLEVBQW9CLE1BQXBCLEVBQTRCLE1BQU0sQ0FBQyxNQUFuQyxFQUEyQyxnQkFBM0MsRUFBNkQ7TUFDdkUsT0FBQSxFQUFTLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxLQUFDLENBQUEsT0FBRCxDQUFBO1FBQUg7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBRDhEO01BRXZFLE1BQUEsRUFBUyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQUcsS0FBQyxDQUFBLE1BQUQsQ0FBQTtRQUFIO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUY4RDtNQUd2RSxNQUFBLEVBQVMsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUFHLEtBQUMsQ0FBQSxNQUFELENBQUE7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FIOEQ7S0FBN0Q7SUFPWixJQUFDLENBQUEsTUFBRCxHQUFVO0lBQ1YsSUFBQyxDQUFBLE1BQUQsR0FBVTtFQVRDOztrQkFXYixPQUFBLEdBQVMsU0FBQTtJQUNQLE9BQU8sQ0FBQyxHQUFSLENBQVksaUJBQVo7V0FDQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFYLENBQXVCLE1BQXZCLEVBQStCLGNBQS9CLEVBQStDLEVBQS9DLEVBQW1ELEVBQW5ELEVBQXVELENBQUMsQ0FBeEQsRUFBMkQsQ0FBM0QsRUFBOEQsQ0FBOUQ7RUFGTzs7a0JBSVQsTUFBQSxHQUFRLFNBQUE7SUFDTixPQUFPLENBQUMsR0FBUixDQUFZLGtCQUFBLEdBQW1CLE1BQU0sQ0FB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c291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiY2xhc3MgTWF0Y2hcclxuICBjb25zdHJ1Y3RvcjogLT5cclxuICAgIEBnYW1lID0gbmV3IFBoYXNlci5HYW1lIFwiMTAwJVwiLCBcIjEwMCVcIiwgUGhhc2VyLkNBTlZBUywgJ3BoYXNlci1leGFtcGxlJywge1xyXG4gICAgICBwcmVsb2FkOiA9PiBAcHJlbG9hZCgpXHJcbiAgICAgIGNyZWF0ZTogID0+IEBjcmVhdGUoKVxyXG4gICAgICB1cGRhdGU6ICA9PiBAdXBkYXRlKClcclxuICAgIH1cclxuXHJcbiAgICAjIEdyaWQgZ2VtIGNvdW50c1xyXG4gICAgQGdyaWRDWCA9IDhcclxuICAgIEBncmlkQ1kgPSA3XHJcblxyXG4gIHByZWxvYWQ6IC0+XHJcbiAgICBjb25zb2xlLmxvZyBcIk1hdGNoLnByZWxvYWQoKVwiXHJcbiAgICBAZ2FtZS5sb2FkLnNwcml0ZXNoZWV0KCdnZW1zJywgJ2ltZy9nZW1zLnBuZycsIDgwLCA4MCwgLTEsIDQsIDQpXHJcblxyXG4gIGNyZWF0ZTogLT5cclxuICAgIGNvbnNvbGUubG9nIFwiTWF0Y2guY3JlYXRlKCk6ICN7d2luZG93LmlubmVyV2lkdGh9eCN7d2luZG93LmlubmVySGVpZ2h0fVwiXHJcblxyXG4gICAgQGdhbWUuaW5wdXQub25Eb3duLmFkZCAocCkgPT4gQG9uRG93bihwKVxyXG4gICAgQGdhbWUuaW5wdXQub25VcC5hZGQgKHApID0+IEBvblVwKHApXHJcblxyXG4gICAgQHNjcmVlblcgPSB3aW5kb3cuaW5uZXJXaWR0aFxyXG4gICAgQHNjcmVlbkggPSB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgIEBnZW1TaXplID0gQHNjcmVlblcgLyBAZ3JpZENYXHJcbiAgICBAZ3JpZFcgPSBAZ2VtU2l6ZSAqIEBncmlkQ1hcclxuICAgIEBncmlkSCA9IEBnZW1TaXplICogQGdyaWRDWVxyXG4gICAgQGdyaWRYID0gMFxyXG4gICAgQGdyaWRZID0gKChAc2NyZWVuSCAtIChAZ2VtU2l6ZSAqIEBncmlkQ1kpKSAtIEBnZW1TaXplKSA+PiAxXHJcblxyXG4gICAgQG5ld0dhbWUoKVxyXG5cclxuICBuZXdHYW1lOiAtPlxyXG4gICAgaWYgQGdyaWRcclxuICAgICAgZm9yIGkgaW4gWzAuLi5AZ3JpZENYXVxyXG4gICAgICAgIGZvciBqIGluIFswLi4uQGdyaWRDWV1cclxuICAgICAgICAgIGlmIEBncmlkW2ldW2pdXHJcbiAgICAgICAgICAgIEBncmlkW2ldW2pdLnNwcml0ZS5kZXN0cm95KClcclxuXHJcbiAgICBAZ3JpZCA9IEFycmF5KEBncmlkQ1gpXHJcbiAgICBmb3IgaSBpbiBbMC4uLkBncmlkQ1hdXHJcbiAgICAgIEBncmlkW2ldID0gQXJyYXkoQGdyaWRDWSlcclxuICAgICAgZm9yIGogaW4gWzAuLi5AZ3JpZENZXVxyXG4gICAgICAgIEBncmlkW2ldW2pdID0gbnVsbFxyXG4gICAgQHNwYXduR2VtcygpXHJcblxyXG4gIHVwZGF0ZTogLT5cclxuXHJcbiAgc2NyZWVuVG9HcmlkOiAoeCwgeSkgLT5cclxuICAgIGcgPVxyXG4gICAgICB4OiBNYXRoLmZsb29yKCh4IC0gQGdyaWRYKSAvIEBnZW1TaXplKVxyXG4gICAgICB5OiBNYXRoLmZsb29yKCh5IC0gQGdyaWRZKSAvIEBnZW1TaXplKVxyXG4gICAgaWYgKGcueCA8IDApIG9yIChnLnggPj0gQGdyaWRDWCkgb3IgKGcueSA8IDApIG9yIChnLnkgPj0gQGdyaWRDWSlcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIHJldHVybiBnXHJcblxyXG4gIGdyaWRUb1NjcmVlbjogKHgsIHkpIC0+XHJcbiAgICBjb25zb2xlLmxvZ1xyXG4gICAgcCA9XHJcbiAgICAgIHg6IE1hdGguZmxvb3IoeCAqIEBnZW1TaXplKSArIEBncmlkWFxyXG4gICAgICB5OiBNYXRoLmZsb29yKHkgKiBAZ2VtU2l6ZSkgKyBAZ3JpZFlcclxuICAgIHJldHVybiBwXHJcblxyXG4gIG9uRG93bjogKHApIC0+XHJcbiAgICAjIGNvbnNvbGUubG9nIFwiZG93blwiLCBbcC54LHAueSxwLnNjcmVlblgscC5zY3JlZW5ZXVxyXG4gICAgZyA9IEBzY3JlZW5Ub0dyaWQocC54LCBwLnkpXHJcbiAgICBpZiBnICE9IG51bGxcclxuICAgICAgQGVtaXRTY29yZVBhcnRpY2xlKGcueCwgZy55LCAwLCAxMDApXHJcbiAgICAgIEBicmVha0dlbShnLngsIGcueSlcclxuICAgICAgQHNwYXduR2VtcygpXHJcbiAgICBlbHNlXHJcbiAgICAgIGNvbnNvbGUubG9nIFwiYmFkIGNvb3JkXCJcclxuICAgICMgQG5ld0dhbWUoKVxyXG5cclxuICBvblVwOiAocCkgLT5cclxuICAgICMgY29uc29sZS5sb2cgXCJ1cFwiLCBbcC54LHAueSxwLnNjcmVlblgscC5zY3JlZW5ZXVxyXG5cclxuICBicmVha0dlbTogKHgsIHkpIC0+XHJcbiAgICBjb25zb2xlLmxvZyBcImJyZWFrR2VtKCN7eH0sICN7eX0pXCJcclxuICAgIGlmIEBncmlkW3hdW3ldICE9IG51bGxcclxuICAgICAgQGdyaWRbeF1beV0uc3ByaXRlLmRlc3Ryb3koKVxyXG4gICAgICBAZ3JpZFt4XVt5XSA9IG51bGxcclxuICAgIGlmICh4ID4gMCkgYW5kIChAZ3JpZFt4LTFdW3ldICE9IG51bGwpXHJcbiAgICAgIEBncmlkW3gtMV1beV0uc3ByaXRlLmRlc3Ryb3koKVxyXG4gICAgICBAZ3JpZFt4LTFdW3ldID0gbnVsbFxyXG4gICAgaWYgKHggPCBAZ3JpZENYLTEpIGFuZCAoQGdyaWRbeCsxXVt5XSAhPSBudWxsKVxyXG4gICAgICBAZ3JpZFt4KzFdW3ldLnNwcml0ZS5kZXN0cm95KClcclxuICAgICAgQGdyaWRbeCsxXVt5XSA9IG51bGxcclxuXHJcbiAgZ2VtQXJ0SW5kZXg6ICh0eXBlLCBoaWdobGlnaHQ9ZmFsc2UsIHBvd2VyPTApIC0+XHJcbiAgICBpbmRleCA9IHN3aXRjaCB0eXBlXHJcbiAgICAgIHdoZW4gMCwgMSwgMiwgMywgNFxyXG4gICAgICAgIHR5cGVcclxuICAgICAgd2hlbiA1LCA2LCA3XHJcbiAgICAgICAgNyArICgzICogKHR5cGUgLSA1KSlcclxuICAgIGlmIGhpZ2hsaWdodFxyXG4gICAgICBpbmRleCArPSAxNlxyXG4gICAgaW5kZXggKz0gcG93ZXJcclxuICAgIHJldHVybiBpbmRleFxyXG5cclxuICBlbWl0U2NvcmVQYXJ0aWNsZTogKGdyaWRYLCBncmlkWSwgdHlwZSwgc2NvcmUpIC0+XHJcbiAgICBwID0gQGdyaWRUb1NjcmVlbihncmlkWCwgZ3JpZFkpXHJcbiAgICBzdHlsZSA9IHsgZm9udDogXCJib2xkIDE2cHggQXJpYWxcIiwgZmlsbDogXCIjZmZmXCIsIGJvdW5kc0FsaWduSDogXCJjZW50ZXJcIiwgYm91bmRzQWxpZ25WOiBcIm1pZGRsZVwiIH1cclxuICAgIHRleHQgPSBAZ2FtZS5hZGQudGV4dChwLngsIHAueSwgXCJcIitzY29yZSwgc3R5bGUpXHJcbiAgICB0ZXh0LnNldFNoYWRvdygzLCAzLCAncmdiYSgwLDAsMCwwLjUpJywgMilcclxuICAgIHRleHQuc2V0VGV4dEJvdW5kcygwLCAwLCBAZ2VtU2l6ZSwgQGdlbVNpemUpO1xyXG4gICAgQGdhbWUuYWRkLnR3ZWVuKHRleHQpLnRvKHsgeTogcC55IC0gKEBnZW1TaXplIC8gNCksIGFscGhhOiAwIH0sIDEwMDAsIFBoYXNlci5FYXNpbmcuUXVhcnRpYy5JbiwgdHJ1ZSlcclxuICAgIEBnYW1lLmFkZC50d2Vlbih0ZXh0LnNjYWxlKS50byh7IHg6IDIsIHk6IDIgfSwgMTAwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSlcclxuICAgIEBnYW1lLnRpbWUuZXZlbnRzLmFkZCAxMDAwLCAtPlxyXG4gICAgICB0ZXh0LmRlc3Ryb3koKVxyXG5cclxuICBiZXN0R2VtVG9TcGF3bjogLT5cclxuICAgICMgVE9ETzogRGVjaWRlIGJhc2VkIG9uIGN1cnJlbnQgZ2VtIGRpc3RyaWJ1dGlvblxyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDgpXHJcblxyXG4gIHNwYXduR2VtczogLT5cclxuICAgICMgZHJvcCBnZW1zIGZyb20gaGlnaGVyIHVwIHNsb3RzIGRvd25cclxuICAgIG5ld0dyaWQgPSBBcnJheShAZ3JpZENYKVxyXG4gICAgZm9yIGkgaW4gWzAuLi5AZ3JpZENYXVxyXG4gICAgICBuZXdHcmlkW2ldID0gQXJyYXkoQGdyaWRDWSlcclxuICAgICAgb2xkSW5kZXggPSBuZXdJbmRleCA9IEBncmlkQ1kgLSAxXHJcbiAgICAgIHdoaWxlIG9sZEluZGV4ID49IDBcclxuICAgICAgICBpZiBAZ3JpZFtpXVtvbGRJbmRleF0gIT0gbnVsbFxyXG4gICAgICAgICAgbmV3R3JpZFtpXVtuZXdJbmRleF0gPSBAZ3JpZFtpXVtvbGRJbmRleF1cclxuICAgICAgICAgIG5ld0luZGV4IC09IDFcclxuICAgICAgICBvbGRJbmRleCAtPSAxXHJcbiAgICAgIHdoaWxlIG5ld0luZGV4ID49IDBcclxuICAgICAgICBuZXdHcmlkW2ldW25ld0luZGV4XSA9IG51bGxcclxuICAgICAgICBuZXdJbmRleCAtPSAxXHJcbiAgICBAZ3JpZCA9IG5ld0dyaWRcclxuXHJcbiAgICAjIHVwZGF0ZSBzcHJpdGVzIGFuZCB4L3lcclxuICAgIGZvciBpIGluIFswLi4uQGdyaWRDWF1cclxuICAgICAgZm9yIGogaW4gWzAuLi5AZ3JpZENZXVxyXG4gICAgICAgIGdlbSA9IEBncmlkW2ldW2pdXHJcbiAgICAgICAgaWYgZ2VtID09IG51bGxcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgaWYgKGdlbS54ICE9IGkpIG9yIChnZW0ueSAhPSBqKVxyXG4gICAgICAgICAgeCA9IEBncmlkWCArIChpICogQGdlbVNpemUpXHJcbiAgICAgICAgICB5ID0gQGdyaWRZICsgKGogKiBAZ2VtU2l6ZSlcclxuICAgICAgICAgIEBnYW1lLmFkZC50d2VlbihnZW0uc3ByaXRlKS50byh7IHg6IHgsIHk6IHkgfSwgNDAwLCBQaGFzZXIuRWFzaW5nLkJvdW5jZS5PdXQsIHRydWUpXHJcbiAgICAgICAgICBnZW0ueCA9IGlcclxuICAgICAgICAgIGdlbS55ID0galxyXG5cclxuICAgICMgZHJvcCBmcm9tIHRoZSB0b3BcclxuICAgIGZvciBpIGluIFswLi4uQGdyaWRDWF1cclxuICAgICAgZm9yIGogaW4gWzAuLi5AZ3JpZENZXVxyXG4gICAgICAgIGlmIEBncmlkW2ldW2pdID09IG51bGxcclxuICAgICAgICAgIGdlbVR5cGUgPSBAYmVzdEdlbVRvU3Bhd24oKVxyXG4gICAgICAgICAgeCA9IEBncmlkWCArIChpICogQGdlbVNpemUpXHJcbiAgICAgICAgICB5ID0gQGdyaWRZICsgKGogKiBAZ2VtU2l6ZSlcclxuICAgICAgICAgIHNwcml0ZSA9IEBnYW1lLmFkZC5zcHJpdGUoeCwgeSAtIEBncmlkSCwgJ2dlbXMnLCBAZ2VtQXJ0SW5kZXgoZ2VtVHlwZSwgZmFsc2UpKVxyXG4gICAgICAgICAgc3ByaXRlLndpZHRoID0gQGdlbVNpemVcclxuICAgICAgICAgIHNwcml0ZS5oZWlnaHQgPSBAZ2VtU2l6ZVxyXG4gICAgICAgICAgQGdhbWUud29ybGQuc2VuZFRvQmFjayhzcHJpdGUpXHJcbiAgICAgICAgICBAZ2FtZS5hZGQudHdlZW4oc3ByaXRlKS50byh7IHk6IHkgfSwgNDAwLCBQaGFzZXIuRWFzaW5nLkJvdW5jZS5PdXQsIHRydWUpXHJcbiAgICAgICAgICBAZ3JpZFtpXVtqXSA9XHJcbiAgICAgICAgICAgIHg6IGlcclxuICAgICAgICAgICAgeTogalxyXG4gICAgICAgICAgICB0eXBlOiBnZW1UeXBlXHJcbiAgICAgICAgICAgIHNwcml0ZTogc3ByaXRlXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGNoXHJcbiIsIk1hdGNoID0gcmVxdWlyZSAnLi9NYXRjaCdcclxuXHJcbm9uRGV2aWNlUmVhZHkgPSAtPlxyXG4gIGNvbnNvbGUubG9nKCdkZXZpY2VyZWFkeScpXHJcbiAgd2luZG93Lm1hdGNoID0gbmV3IE1hdGNoXHJcblxyXG5pbml0ID0gLT5cclxuICBjb25zb2xlLmxvZyBcImluaXRcIlxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5Jywgb25EZXZpY2VSZWFkeSwgZmFsc2UpXHJcblxyXG5pbml0KClcclxuIl19
