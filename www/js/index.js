(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Match;

Match = (function() {
  function Match() {
    this.game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'phaser-example', {
      preload: (function(_this) {
        return function() {
          return _this.preload();
        };
      })(this),
      create: (function(_this) {
        return function() {
          return _this.create();
        };
      })(this),
      update: (function(_this) {
        return function() {
          return _this.update();
        };
      })(this)
    });
    this.gridCX = 8;
    this.gridCY = 7;
  }

  Match.prototype.preload = function() {
    console.log("Match.preload()");
    return this.game.load.spritesheet('gems', 'img/gems.png', 80, 80, -1, 4, 4);
  };

  Match.prototype.create = function() {
    console.log("Match.create(): " + window.innerWidth + "x" + window.innerHeight);
    this.game.input.onDown.add((function(_this) {
      return function(p) {
        return _this.onDown(p);
      };
    })(this));
    this.game.input.onUp.add((function(_this) {
      return function(p) {
        return _this.onUp(p);
      };
    })(this));
    this.screenW = window.innerWidth;
    this.screenH = window.innerHeight;
    this.gemSize = this.screenW / this.gridCX;
    this.gridW = this.gemSize * this.gridCX;
    this.gridH = this.gemSize * this.gridCY;
    this.gridX = 0;
    this.gridY = ((this.screenH - (this.gemSize * this.gridCY)) - this.gemSize) >> 1;
    return this.newGame();
  };

  Match.prototype.newGame = function() {
    var i, j, k, l, m, n, ref, ref1, ref2, ref3;
    if (this.grid) {
      for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = this.gridCY; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          if (this.grid[i][j]) {
            this.grid[i][j].sprite.destroy();
          }
        }
      }
    }
    this.grid = Array(this.gridCX);
    for (i = m = 0, ref2 = this.gridCX; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
      this.grid[i] = Array(this.gridCY);
      for (j = n = 0, ref3 = this.gridCY; 0 <= ref3 ? n < ref3 : n > ref3; j = 0 <= ref3 ? ++n : --n) {
        this.grid[i][j] = null;
      }
    }
    return this.spawnGems();
  };

  Match.prototype.update = function() {};

  Match.prototype.screenToGrid = function(p) {
    var g;
    g = {
      x: Math.floor((p.x - this.gridX) / this.gemSize),
      y: Math.floor((p.y - this.gridY) / this.gemSize)
    };
    if ((g.x < 0) || (g.x >= this.gridCX) || (g.y < 0) || (g.y >= this.gridCY)) {
      return null;
    }
    return g;
  };

  Match.prototype.onDown = function(p) {
    var g;
    g = this.screenToGrid(p);
    if (g !== null) {
      this.breakGem(g.x, g.y);
      return this.spawnGems();
    } else {
      return console.log("bad coord");
    }
  };

  Match.prototype.onUp = function(p) {};

  Match.prototype.breakGem = function(x, y) {
    console.log("breakGem(" + x + ", " + y + ")");
    if (this.grid[x][y] !== null) {
      this.grid[x][y].sprite.destroy();
      this.grid[x][y] = null;
    }
    if ((x > 0) && (this.grid[x - 1][y] !== null)) {
      this.grid[x - 1][y].sprite.destroy();
      this.grid[x - 1][y] = null;
    }
    if ((x < this.gridCX - 1) && (this.grid[x + 1][y] !== null)) {
      this.grid[x + 1][y].sprite.destroy();
      return this.grid[x + 1][y] = null;
    }
  };

  Match.prototype.gemArtIndex = function(type, highlight, power) {
    var index;
    if (highlight == null) {
      highlight = false;
    }
    if (power == null) {
      power = 0;
    }
    index = (function() {
      switch (type) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          return type;
        case 5:
        case 6:
        case 7:
          return 7 + (3 * (type - 5));
      }
    })();
    if (highlight) {
      index += 16;
    }
    index += power;
    return index;
  };

  Match.prototype.bestGemToSpawn = function() {
    return Math.floor(Math.random() * 8);
  };

  Match.prototype.spawnGems = function() {
    var gem, gemType, i, j, k, l, m, n, newGrid, newIndex, oldIndex, ref, ref1, ref2, ref3, results, sprite, x, y;
    newGrid = Array(this.gridCX);
    for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      newGrid[i] = Array(this.gridCY);
      oldIndex = newIndex = this.gridCY - 1;
      while (oldIndex >= 0) {
        if (this.grid[i][oldIndex] !== null) {
          newGrid[i][newIndex] = this.grid[i][oldIndex];
          newIndex -= 1;
        }
        oldIndex -= 1;
      }
      while (newIndex >= 0) {
        newGrid[i][newIndex] = null;
        newIndex -= 1;
      }
    }
    this.grid = newGrid;
    for (i = l = 0, ref1 = this.gridCX; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      for (j = m = 0, ref2 = this.gridCY; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {
        gem = this.grid[i][j];
        if (gem === null) {
          continue;
        }
        if ((gem.x !== i) || (gem.y !== j)) {
          x = this.gridX + (i * this.gemSize);
          y = this.gridY + (j * this.gemSize);
          this.game.add.tween(gem.sprite).to({
            x: x,
            y: y
          }, 400, Phaser.Easing.Bounce.Out, true);
          gem.x = i;
          gem.y = j;
        }
      }
    }
    results = [];
    for (i = n = 0, ref3 = this.gridCX; 0 <= ref3 ? n < ref3 : n > ref3; i = 0 <= ref3 ? ++n : --n) {
      results.push((function() {
        var o, ref4, results1;
        results1 = [];
        for (j = o = 0, ref4 = this.gridCY; 0 <= ref4 ? o < ref4 : o > ref4; j = 0 <= ref4 ? ++o : --o) {
          if (this.grid[i][j] === null) {
            gemType = this.bestGemToSpawn();
            x = this.gridX + (i * this.gemSize);
            y = this.gridY + (j * this.gemSize);
            sprite = this.game.add.sprite(x, y - this.gridH, 'gems', this.gemArtIndex(gemType, false));
            sprite.width = this.gemSize;
            sprite.height = this.gemSize;
            this.game.add.tween(sprite).to({
              y: y
            }, 400, Phaser.Easing.Bounce.Out, true);
            results1.push(this.grid[i][j] = {
              x: i,
              y: j,
              type: gemType,
              sprite: sprite
            });
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return Match;

})();

module.exports = Match;


},{}],2:[function(require,module,exports){
var Match, init, onDeviceReady;

Match = require('./Match');

onDeviceReady = function() {
  console.log('deviceready');
  return window.match = new Match;
};

init = function() {
  console.log("init");
  return document.addEventListener('deviceready', onDeviceReady, false);
};

init();


},{"./Match":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
