(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Match;

Match = (function() {
  function Match() {
    this.game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'phaser-example', {
      preload: (function(_this) {
        return function() {
          return _this.preload();
        };
      })(this),
      create: (function(_this) {
        return function() {
          return _this.create();
        };
      })(this),
      update: (function(_this) {
        return function() {
          return _this.update();
        };
      })(this)
    });
    this.gridCX = 8;
    this.gridCY = 7;
  }

  Match.prototype.preload = function() {
    console.log("Match.preload()");
    return this.game.load.spritesheet('gems', 'img/gems.png', 80, 80, -1, 4, 4);
  };

  Match.prototype.create = function() {
    console.log("Match.create(): " + window.innerWidth + "x" + window.innerHeight);
    this.screenW = window.innerWidth;
    this.screenH = window.innerHeight;
    if (this.screenW > this.screenH) {
      this.screenW = Math.floor(this.screenH / 16 * 9);
    }
    console.log("created screen " + this.screenW + "x" + this.screenH);
    this.gemSize = this.screenW / this.gridCX;
    this.gridW = this.gemSize * this.gridCX;
    this.gridH = this.gemSize * this.gridCY;
    this.gridX = 0;
    this.gridY = ((this.screenH - (this.gemSize * this.gridCY)) - this.gemSize) >> 1;
    this.game.input.onDown.add((function(_this) {
      return function(p) {
        return _this.onDown(p);
      };
    })(this));
    this.game.input.onUp.add((function(_this) {
      return function(p) {
        return _this.onUp(p);
      };
    })(this));
    return this.newGame();
  };

  Match.prototype.newGame = function() {
    var i, j, k, l, m, n, ref, ref1, ref2, ref3;
    this.dragStartX = null;
    this.dragStartY = null;
    if (this.grid) {
      for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = this.gridCY; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          if (this.grid[i][j]) {
            this.grid[i][j].sprite.destroy();
          }
        }
      }
    }
    this.grid = Array(this.gridCX);
    for (i = m = 0, ref2 = this.gridCX; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
      this.grid[i] = Array(this.gridCY);
      for (j = n = 0, ref3 = this.gridCY; 0 <= ref3 ? n < ref3 : n > ref3; j = 0 <= ref3 ? ++n : --n) {
        this.grid[i][j] = null;
      }
    }
    return this.spawnGems();
  };

  Match.prototype.update = function() {};

  Match.prototype.screenToGrid = function(x, y, nearest) {
    var g;
    if (nearest == null) {
      nearest = false;
    }
    g = {
      x: Math.floor((x - this.gridX) / this.gemSize),
      y: Math.floor((y - this.gridY) / this.gemSize)
    };
    if (nearest) {
      g.x = Math.max(g.x, 0);
      g.x = Math.min(g.x, this.gridCX - 1);
      g.y = Math.max(g.y, 0);
      g.y = Math.min(g.y, this.gridCY - 1);
    } else if ((g.x < 0) || (g.x >= this.gridCX) || (g.y < 0) || (g.y >= this.gridCY)) {
      return null;
    }
    return g;
  };

  Match.prototype.gridToScreen = function(x, y) {
    var p;
    console.log;
    p = {
      x: Math.floor(x * this.gemSize) + this.gridX,
      y: Math.floor(y * this.gemSize) + this.gridY
    };
    return p;
  };

  Match.prototype.swapChain = function(startX, startY, endX, endY, draggingStart) {
    var deltaX, deltaY, newX, newY, results, temp, x, y;
    if (draggingStart == null) {
      draggingStart = false;
    }
    x = startX;
    y = startY;
    deltaX = endX - x;
    deltaY = endY - y;
    deltaX = Math.max(deltaX, -1);
    deltaX = Math.min(deltaX, 1);
    deltaY = Math.max(deltaY, -1);
    deltaY = Math.min(deltaY, 1);
    results = [];
    while ((x !== endX) || (y !== endY)) {
      newX = x + deltaX;
      newY = y + deltaY;
      temp = this.grid[x][y];
      this.grid[x][y] = this.grid[newX][newY];
      this.grid[newX][newY] = temp;
      if (this.grid[x][y] !== null) {
        this.grid[x][y].x = x;
        this.grid[x][y].y = y;
      }
      if (this.grid[newX][newY] !== null) {
        this.grid[newX][newY].x = newX;
        this.grid[newX][newY].y = newY;
      }
      this.moveGemHome(x, y);
      if (!draggingStart) {
        this.moveGemHome(newX, newY);
      }
      x = newX;
      results.push(y = newY);
    }
    return results;
  };

  Match.prototype.onDown = function(p) {
    var g, sprite;
    g = this.screenToGrid(p.x, p.y);
    if (g === null) {
      console.log("bad coord");
      return;
    }
    if (this.grid[g.x][g.y] !== null) {
      console.log("enabling drag on " + g.x + " " + g.y);
      sprite = this.grid[g.x][g.y].sprite;
      sprite.input.enableDrag(true);
      sprite.events.onDragUpdate.add((function(_this) {
        return function(sprite, pointer, dragX, dragY, snapPoint) {
          return _this.onOver(Math.floor(dragX + (_this.gemSize / 2)), Math.floor(dragY + (_this.gemSize / 2)));
        };
      })(this));
      this.dragStartX = this.dragX = g.x;
      return this.dragStartY = this.dragY = g.y;
    }
  };

  Match.prototype.onOver = function(x, y) {
    var deltaX, deltaY, g;
    if ((this.dragStartX === null) || (this.dragStartY === null)) {
      return;
    }
    g = this.screenToGrid(x, y, true);
    deltaX = Math.abs(g.x - this.dragStartX);
    deltaY = Math.abs(g.y - this.dragStartY);
    if ((deltaX === 0) && (deltaY === 0)) {
      return;
    }
    if (deltaX < deltaY) {
      g.x = this.dragStartX;
      if (this.dragX !== this.dragStartX) {
        console.log("rewinding drag X " + deltaX + " " + deltaY);
        this.rewindDrag();
      }
    } else {
      g.y = this.dragStartY;
      if (this.dragY !== this.dragStartY) {
        console.log("rewinding drag Y " + deltaX + " " + deltaY);
        this.rewindDrag();
      }
    }
    this.swapChain(this.dragX, this.dragY, g.x, g.y, true);
    this.dragX = g.x;
    return this.dragY = g.y;
  };

  Match.prototype.onUp = function(p) {
    this.rewindDrag();
    return this.finishDrag();
  };

  Match.prototype.finishDrag = function() {
    if ((this.dragX !== null) && (this.dragY !== null) && (this.grid[this.dragX][this.dragY] !== null)) {
      this.grid[this.dragX][this.dragY].sprite.input.enableDrag(false);
      this.grid[this.dragX][this.dragY].sprite.events.onDragUpdate.removeAll();
    }
    this.dragStartX = this.dragX = null;
    return this.dragStartY = this.dragY = null;
  };

  Match.prototype.rewindDrag = function() {
    if ((this.dragStartX !== null) && (this.dragStartY !== null)) {
      console.log("moving (" + this.dragX + ", " + this.dragY + ") home (" + this.dragStartX + ", " + this.dragStartY + ")");
      this.swapChain(this.dragX, this.dragY, this.dragStartX, this.dragStartY);
      this.moveGemHome(this.dragStartX, this.dragStartY);
      this.dragX = this.dragStartX;
      return this.dragY = this.dragStartY;
    }
  };

  Match.prototype.breakGem = function(x, y) {
    console.log("breakGem(" + x + ", " + y + ")");
    if (this.grid[x][y] !== null) {
      this.grid[x][y].sprite.destroy();
      this.grid[x][y] = null;
    }
    if ((x > 0) && (this.grid[x - 1][y] !== null)) {
      this.grid[x - 1][y].sprite.destroy();
      this.grid[x - 1][y] = null;
    }
    if ((x < this.gridCX - 1) && (this.grid[x + 1][y] !== null)) {
      this.grid[x + 1][y].sprite.destroy();
      return this.grid[x + 1][y] = null;
    }
  };

  Match.prototype.gemArtIndex = function(type, highlight, power) {
    var index;
    if (highlight == null) {
      highlight = false;
    }
    if (power == null) {
      power = 0;
    }
    index = (function() {
      switch (type) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          return type;
        case 5:
        case 6:
        case 7:
          return 7 + (3 * (type - 5));
      }
    })();
    if (highlight) {
      index += 16;
    }
    index += power;
    return index;
  };

  Match.prototype.emitScoreParticle = function(gridX, gridY, type, score) {
    var p, style, text;
    p = this.gridToScreen(gridX, gridY);
    style = {
      font: "bold 16px Arial",
      fill: "#fff",
      boundsAlignH: "center",
      boundsAlignV: "middle"
    };
    text = this.game.add.text(p.x, p.y, "" + score, style);
    text.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);
    text.setTextBounds(0, 0, this.gemSize, this.gemSize);
    this.game.add.tween(text).to({
      y: p.y - (this.gemSize / 4),
      alpha: 0
    }, 1000, Phaser.Easing.Quartic.In, true);
    this.game.add.tween(text.scale).to({
      x: 2,
      y: 2
    }, 1000, Phaser.Easing.Linear.None, true);
    return this.game.time.events.add(1000, function() {
      return text.destroy();
    });
  };

  Match.prototype.bestGemToSpawn = function() {
    return Math.floor(Math.random() * 8);
  };

  Match.prototype.moveGemHome = function(gx, gy, bounce) {
    var easing, gem, speed, x, y;
    if (bounce == null) {
      bounce = false;
    }
    gem = this.grid[gx][gy];
    if (gem === null) {
      return;
    }
    x = this.gridX + (gx * this.gemSize);
    y = this.gridY + (gy * this.gemSize);
    easing = Phaser.Easing.Linear.None;
    speed = 100;
    if (bounce) {
      easing = Phaser.Easing.Bounce.Out;
      speed = 400;
    }
    return this.game.add.tween(gem.sprite).to({
      x: x,
      y: y
    }, speed, easing, true);
  };

  Match.prototype.spawnGems = function() {
    var gem, gemType, i, j, k, l, m, n, newGrid, newIndex, oldIndex, ref, ref1, ref2, ref3, results, sprite, x, y;
    newGrid = Array(this.gridCX);
    for (i = k = 0, ref = this.gridCX; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      newGrid[i] = Array(this.gridCY);
      oldIndex = newIndex = this.gridCY - 1;
      while (oldIndex >= 0) {
        if (this.grid[i][oldIndex] !== null) {
          newGrid[i][newIndex] = this.grid[i][oldIndex];
          newIndex -= 1;
        }
        oldIndex -= 1;
      }
      while (newIndex >= 0) {
        newGrid[i][newIndex] = null;
        newIndex -= 1;
      }
    }
    this.grid = newGrid;
    for (i = l = 0, ref1 = this.gridCX; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      for (j = m = 0, ref2 = this.gridCY; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {
        gem = this.grid[i][j];
        if (gem === null) {
          continue;
        }
        if ((gem.x !== i) || (gem.y !== j)) {
          gem.x = i;
          gem.y = j;
          this.moveGemHome(i, j, true);
        }
      }
    }
    results = [];
    for (i = n = 0, ref3 = this.gridCX; 0 <= ref3 ? n < ref3 : n > ref3; i = 0 <= ref3 ? ++n : --n) {
      results.push((function() {
        var o, ref4, results1;
        results1 = [];
        for (j = o = 0, ref4 = this.gridCY; 0 <= ref4 ? o < ref4 : o > ref4; j = 0 <= ref4 ? ++o : --o) {
          if (this.grid[i][j] === null) {
            gemType = this.bestGemToSpawn();
            x = this.gridX + (i * this.gemSize);
            y = this.gridY + (j * this.gemSize);
            sprite = this.game.add.sprite(x, y - this.gridH, 'gems', this.gemArtIndex(gemType, false));
            sprite.width = this.gemSize;
            sprite.height = this.gemSize;
            sprite.inputEnabled = true;
            this.game.world.sendToBack(sprite);
            this.game.add.tween(sprite).to({
              y: y
            }, 400, Phaser.Easing.Bounce.Out, true);
            results1.push(this.grid[i][j] = {
              x: i,
              y: j,
              type: gemType,
              sprite: sprite
            });
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return Match;

})();

module.exports = Match;


},{}],2:[function(require,module,exports){
var Match, init, onDeviceReady;

Match = require('./Match');

onDeviceReady = function() {
  console.log('deviceready');
  return window.match = new Match;
};

init = function() {
  console.log("init");
  return document.addEventListener('deviceready', onDeviceReady, false);
};

init();


},{"./Match":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJ3d3dcXHNyY1xcTWF0Y2guY29mZmVlIiwid3d3XFxzcmNcXG1haW4uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQTs7QUFBTTtFQUNTLGVBQUE7SUFDWCxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFaLEVBQW9CLE1BQXBCLEVBQTRCLE1BQU0sQ0FBQyxNQUFuQyxFQUEyQyxnQkFBM0MsRUFBNkQ7TUFDdkUsT0FBQSxFQUFTLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxLQUFDLENBQUEsT0FBRCxDQUFBO1FBQUg7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBRDhEO01BRXZFLE1BQUEsRUFBUyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQUcsS0FBQyxDQUFBLE1BQUQsQ0FBQTtRQUFIO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUY4RDtNQUd2RSxNQUFBLEVBQVMsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUFHLEtBQUMsQ0FBQSxNQUFELENBQUE7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FIOEQ7S0FBN0Q7SUFPWixJQUFDLENBQUEsTUFBRCxHQUFVO0lBQ1YsSUFBQyxDQUFBLE1BQUQsR0FBVTtFQVRDOztrQkFXYixPQUFBLEdBQVMsU0FBQTtJQUNQLE9BQU8sQ0FBQyxHQUFSLENBQVksaUJBQVo7V0FDQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFYLENBQXVCLE1BQXZCLEVBQStCLGNBQS9CLEVBQStDLEVBQS9DLEVBQW1ELEVBQW5ELEVBQXVELENBQUMsQ0FBeEQsRUFBMkQsQ0FBM0QsRUFBOEQsQ0FBOUQ7RUFGTzs7a0JBSVQsTUFBQSxHQUFRLFNBQUE7SUFDTixPQUFPLENBQUMsR0FBUixDQUFZLGtCQUFBLEdBQW1CLE1BQU0sQ0FB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RUFBb0UsSUFBcEU7MEJBQ0EsSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQVQsR0FDRTtjQUFBLENBQUEsRUFBRyxDQUFIO2NBQ0EsQ0FBQSxFQUFHLENBREg7Y0FFQSxJQUFBLEVBQU0sT0FGTjtjQUdBLE1BQUEsRUFBUSxNQUhSO2VBWEo7V0FBQSxNQUFBO2tDQUFBOztBQURGOzs7QUFERjs7RUE1QlM7Ozs7OztBQThDYixNQUFNLENBQUMsT0FBUCxHQUFpQjs7OztBQzFRakIsSUFBQTs7QUFBQSxLQUFBLEdBQVEsT0FBQSxDQUFRLFNBQVI7O0FBRVIsYUFBQSxHQUFnQixTQUFBO0VBQ2QsT0FBTyxDQUFDLEdBQVIsQ0FBWSxhQUFaO1NBQ0EsTUFBTSxDQUFDLEtBQVAsR0FBZSxJQUFJO0FBRkw7O0FBSWhCLElBQUEsR0FBTyxTQUFBO0VBQ0wsT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFaO1NBQ0EsUUFBUSxDQUFDLGdCQUFULENBQTBCLGFBQTFCLEVBQXlDLGFBQXpDLEVBQXdELEtBQXhEO0FBRks7O0FBSVAsSUFBQSxDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImNsYXNzIE1hdGNoXHJcbiAgY29uc3RydWN0b3I6IC0+XHJcbiAgICBAZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSBcIjEwMCVcIiwgXCIxMDAlXCIsIFBoYXNlci5DQU5WQVMsICdwaGFzZXItZXhhbXBsZScsIHtcclxuICAgICAgcHJlbG9hZDogPT4gQHByZWxvYWQoKVxyXG4gICAgICBjcmVhdGU6ICA9PiBAY3JlYXRlKClcclxuICAgICAgdXBkYXRlOiAgPT4gQHVwZGF0ZSgpXHJcbiAgICB9XHJcblxyXG4gICAgIyBHcmlkIGdlbSBjb3VudHNcclxuICAgIEBncmlkQ1ggPSA4XHJcbiAgICBAZ3JpZENZID0gN1xyXG5cclxuICBwcmVsb2FkOiAtPlxyXG4gICAgY29uc29sZS5sb2cgXCJNYXRjaC5wcmVsb2FkKClcIlxyXG4gICAgQGdhbWUubG9hZC5zcHJpdGVzaGVldCgnZ2VtcycsICdpbWcvZ2Vtcy5wbmcnLCA4MCwgODAsIC0xLCA0LCA0KVxyXG5cclxuICBjcmVhdGU6IC0+XHJcbiAgICBjb25zb2xlLmxvZyBcIk1hdGNoLmNyZWF0ZSgpOiAje3dpbmRvdy5pbm5lcldpZHRofXgje3dpbmRvdy5pbm5lckhlaWdodH1cIlxyXG4gICAgQHNjcmVlblcgPSB3aW5kb3cuaW5uZXJXaWR0aFxyXG4gICAgQHNjcmVlbkggPSB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgIGlmIEBzY3JlZW5XID4gQHNjcmVlbkhcclxuICAgICAgQHNjcmVlblcgPSBNYXRoLmZsb29yKEBzY3JlZW5IIC8gMTYgKiA5KVxyXG4gICAgY29uc29sZS5sb2cgXCJjcmVhdGVkIHNjcmVlbiAje0BzY3JlZW5XfXgje0BzY3JlZW5IfVwiXHJcblxyXG4gICAgQGdlbVNpemUgPSBAc2NyZWVuVyAvIEBncmlkQ1hcclxuICAgIEBncmlkVyA9IEBnZW1TaXplICogQGdyaWRDWFxyXG4gICAgQGdyaWRIID0gQGdlbVNpemUgKiBAZ3JpZENZXHJcbiAgICBAZ3JpZFggPSAwXHJcbiAgICBAZ3JpZFkgPSAoKEBzY3JlZW5IIC0gKEBnZW1TaXplICogQGdyaWRDWSkpIC0gQGdlbVNpemUpID4+IDFcclxuXHJcbiAgICBAZ2FtZS5pbnB1dC5vbkRvd24uYWRkIChwKSA9PiBAb25Eb3duKHApXHJcbiAgICBAZ2FtZS5pbnB1dC5vblVwLmFkZCAocCkgPT4gQG9uVXAocClcclxuXHJcbiAgICBAbmV3R2FtZSgpXHJcblxyXG4gIG5ld0dhbWU6IC0+XHJcbiAgICBAZHJhZ1N0YXJ0WCA9IG51bGxcclxuICAgIEBkcmFnU3RhcnRZID0gbnVsbFxyXG5cclxuICAgIGlmIEBncmlkXHJcbiAgICAgIGZvciBpIGluIFswLi4uQGdyaWRDWF1cclxuICAgICAgICBmb3IgaiBpbiBbMC4uLkBncmlkQ1ldXHJcbiAgICAgICAgICBpZiBAZ3JpZFtpXVtqXVxyXG4gICAgICAgICAgICBAZ3JpZFtpXVtqXS5zcHJpdGUuZGVzdHJveSgpXHJcblxyXG4gICAgQGdyaWQgPSBBcnJheShAZ3JpZENYKVxyXG4gICAgZm9yIGkgaW4gWzAuLi5AZ3JpZENYXVxyXG4gICAgICBAZ3JpZFtpXSA9IEFycmF5KEBncmlkQ1kpXHJcbiAgICAgIGZvciBqIGluIFswLi4uQGdyaWRDWV1cclxuICAgICAgICBAZ3JpZFtpXVtqXSA9IG51bGxcclxuICAgIEBzcGF3bkdlbXMoKVxyXG5cclxuICB1cGRhdGU6IC0+XHJcblxyXG4gIHNjcmVlblRvR3JpZDogKHgsIHksIG5lYXJlc3Q9ZmFsc2UpIC0+XHJcbiAgICBnID1cclxuICAgICAgeDogTWF0aC5mbG9vcigoeCAtIEBncmlkWCkgLyBAZ2VtU2l6ZSlcclxuICAgICAgeTogTWF0aC5mbG9vcigoeSAtIEBncmlkWSkgLyBAZ2VtU2l6ZSlcclxuICAgIGlmIG5lYXJlc3RcclxuICAgICAgZy54ID0gTWF0aC5tYXgoZy54LCAwKVxyXG4gICAgICBnLnggPSBNYXRoLm1pbihnLngsIEBncmlkQ1ggLSAxKVxyXG4gICAgICBnLnkgPSBNYXRoLm1heChnLnksIDApXHJcbiAgICAgIGcueSA9IE1hdGgubWluKGcueSwgQGdyaWRDWSAtIDEpXHJcbiAgICBlbHNlIGlmIChnLnggPCAwKSBvciAoZy54ID49IEBncmlkQ1gpIG9yIChnLnkgPCAwKSBvciAoZy55ID49IEBncmlkQ1kpXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICByZXR1cm4gZ1xyXG5cclxuICBncmlkVG9TY3JlZW46ICh4LCB5KSAtPlxyXG4gICAgY29uc29sZS5sb2dcclxuICAgIHAgPVxyXG4gICAgICB4OiBNYXRoLmZsb29yKHggKiBAZ2VtU2l6ZSkgKyBAZ3JpZFhcclxuICAgICAgeTogTWF0aC5mbG9vcih5ICogQGdlbVNpemUpICsgQGdyaWRZXHJcbiAgICByZXR1cm4gcFxyXG5cclxuICBzd2FwQ2hhaW46IChzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgZHJhZ2dpbmdTdGFydD1mYWxzZSkgLT5cclxuICAgIHggPSBzdGFydFhcclxuICAgIHkgPSBzdGFydFlcclxuICAgIGRlbHRhWCA9IGVuZFggLSB4XHJcbiAgICBkZWx0YVkgPSBlbmRZIC0geVxyXG4gICAgZGVsdGFYID0gTWF0aC5tYXgoZGVsdGFYLCAtMSlcclxuICAgIGRlbHRhWCA9IE1hdGgubWluKGRlbHRhWCwgMSlcclxuICAgIGRlbHRhWSA9IE1hdGgubWF4KGRlbHRhWSwgLTEpXHJcbiAgICBkZWx0YVkgPSBNYXRoLm1pbihkZWx0YVksIDEpXHJcbiAgICB3aGlsZSAoeCAhPSBlbmRYKSBvciAoeSAhPSBlbmRZKVxyXG4gICAgICBuZXdYID0geCArIGRlbHRhWFxyXG4gICAgICBuZXdZID0geSArIGRlbHRhWVxyXG4gICAgICAjIGNvbnNvbGUubG9nIFwiU1dBUCAje3h9ICN7eX0gPC0+ICN7bmV3WH0gI3tuZXdZfVwiXHJcbiAgICAgIHRlbXAgPSBAZ3JpZFt4XVt5XVxyXG4gICAgICBAZ3JpZFt4XVt5XSA9IEBncmlkW25ld1hdW25ld1ldXHJcbiAgICAgIEBncmlkW25ld1hdW25ld1ldID0gdGVtcFxyXG4gICAgICBpZiBAZ3JpZFt4XVt5XSAhPSBudWxsXHJcbiAgICAgICAgQGdyaWRbeF1beV0ueCA9IHhcclxuICAgICAgICBAZ3JpZFt4XVt5XS55ID0geVxyXG4gICAgICBpZiBAZ3JpZFtuZXdYXVtuZXdZXSAhPSBudWxsXHJcbiAgICAgICAgQGdyaWRbbmV3WF1bbmV3WV0ueCA9IG5ld1hcclxuICAgICAgICBAZ3JpZFtuZXdYXVtuZXdZXS55ID0gbmV3WVxyXG4gICAgICBAbW92ZUdlbUhvbWUoeCwgeSlcclxuICAgICAgaWYgbm90IGRyYWdnaW5nU3RhcnRcclxuICAgICAgICBAbW92ZUdlbUhvbWUobmV3WCwgbmV3WSlcclxuICAgICAgeCA9IG5ld1hcclxuICAgICAgeSA9IG5ld1lcclxuXHJcbiAgb25Eb3duOiAocCkgLT5cclxuICAgICMgY29uc29sZS5sb2cgXCJkb3duXCIsIFtwLngscC55LHAuc2NyZWVuWCxwLnNjcmVlblldXHJcbiAgICBnID0gQHNjcmVlblRvR3JpZChwLngsIHAueSlcclxuICAgIGlmIGcgPT0gbnVsbFxyXG4gICAgICBjb25zb2xlLmxvZyBcImJhZCBjb29yZFwiXHJcbiAgICAgIHJldHVyblxyXG5cclxuICAgIGlmIEBncmlkW2cueF1bZy55XSAhPSBudWxsXHJcbiAgICAgIGNvbnNvbGUubG9nIFwiZW5hYmxpbmcgZHJhZyBvbiAje2cueH0gI3tnLnl9XCJcclxuICAgICAgc3ByaXRlID0gQGdyaWRbZy54XVtnLnldLnNwcml0ZVxyXG4gICAgICBzcHJpdGUuaW5wdXQuZW5hYmxlRHJhZyh0cnVlKVxyXG4gICAgICBzcHJpdGUuZXZlbnRzLm9uRHJhZ1VwZGF0ZS5hZGQgKHNwcml0ZSwgcG9pbnRlciwgZHJhZ1gsIGRyYWdZLCBzbmFwUG9pbnQpID0+XHJcbiAgICAgICAgIyBIYXZlIHRvIGFkZCBoYWxmIGEgZ2VtIGJlY2F1c2UgZHJhZ1gvWSBpcyB0aGUgdG9wbGVmdCBvZiB0aGUgZHJhZ2dlZCBnZW1cclxuICAgICAgICBAb25PdmVyKE1hdGguZmxvb3IoZHJhZ1ggKyAoQGdlbVNpemUgLyAyKSksIE1hdGguZmxvb3IoZHJhZ1kgKyAoQGdlbVNpemUgLyAyKSkpXHJcbiAgICAgIEBkcmFnU3RhcnRYID0gQGRyYWdYID0gZy54XHJcbiAgICAgIEBkcmFnU3RhcnRZID0gQGRyYWdZID0gZy55XHJcblxyXG4gICAgIyBAZW1pdFNjb3JlUGFydGljbGUoZy54LCBnLnksIDAsIDEwMClcclxuICAgICMgQGJyZWFrR2VtKGcueCwgZy55KVxyXG4gICAgIyBAc3Bhd25HZW1zKClcclxuXHJcbiAgb25PdmVyOiAoeCwgeSkgLT5cclxuICAgIGlmIChAZHJhZ1N0YXJ0WCA9PSBudWxsKSBvciAoQGRyYWdTdGFydFkgPT0gbnVsbClcclxuICAgICAgcmV0dXJuXHJcblxyXG4gICAgZyA9IEBzY3JlZW5Ub0dyaWQoeCwgeSwgdHJ1ZSlcclxuICAgIGRlbHRhWCA9IE1hdGguYWJzKGcueCAtIEBkcmFnU3RhcnRYKVxyXG4gICAgZGVsdGFZID0gTWF0aC5hYnMoZy55IC0gQGRyYWdTdGFydFkpXHJcbiAgICBpZiAoZGVsdGFYID09IDApIGFuZCAoZGVsdGFZID09IDApXHJcbiAgICAgIHJldHVyblxyXG5cclxuICAgIGlmIGRlbHRhWCA8IGRlbHRhWVxyXG4gICAgICBnLnggPSBAZHJhZ1N0YXJ0WFxyXG4gICAgICBpZiBAZHJhZ1ggIT0gQGRyYWdTdGFydFhcclxuICAgICAgICBjb25zb2xlLmxvZyBcInJld2luZGluZyBkcmFnIFggI3tkZWx0YVh9ICN7ZGVsdGFZfVwiXHJcbiAgICAgICAgQHJld2luZERyYWcoKVxyXG4gICAgZWxzZVxyXG4gICAgICBnLnkgPSBAZHJhZ1N0YXJ0WVxyXG4gICAgICBpZiBAZHJhZ1kgIT0gQGRyYWdTdGFydFlcclxuICAgICAgICBjb25zb2xlLmxvZyBcInJld2luZGluZyBkcmFnIFkgI3tkZWx0YVh9ICN7ZGVsdGFZfVwiXHJcbiAgICAgICAgQHJld2luZERyYWcoKVxyXG5cclxuICAgIEBzd2FwQ2hhaW4oQGRyYWdYLCBAZHJhZ1ksIGcueCwgZy55LCB0cnVlKVxyXG4gICAgQGRyYWdYID0gZy54XHJcbiAgICBAZHJhZ1kgPSBnLnlcclxuXHJcbiAgb25VcDogKHApIC0+XHJcbiAgICAjIGNvbnNvbGUubG9nIFwidXBcIiwgW3AueCxwLnkscC5zY3JlZW5YLHAuc2NyZWVuWV1cclxuICAgIEByZXdpbmREcmFnKClcclxuICAgIEBmaW5pc2hEcmFnKClcclxuXHJcbiAgZmluaXNoRHJhZzogLT5cclxuICAgIGlmIChAZHJhZ1ggIT0gbnVsbCkgYW5kIChAZHJhZ1kgIT0gbnVsbCkgYW5kIChAZ3JpZFtAZHJhZ1hdW0BkcmFnWV0gIT0gbnVsbClcclxuICAgICAgQGdyaWRbQGRyYWdYXVtAZHJhZ1ldLnNwcml0ZS5pbnB1dC5lbmFibGVEcmFnKGZhbHNlKVxyXG4gICAgICBAZ3JpZFtAZHJhZ1hdW0BkcmFnWV0uc3ByaXRlLmV2ZW50cy5vbkRyYWdVcGRhdGUucmVtb3ZlQWxsKClcclxuICAgIEBkcmFnU3RhcnRYID0gQGRyYWdYID0gbnVsbFxyXG4gICAgQGRyYWdTdGFydFkgPSBAZHJhZ1kgPSBudWxsXHJcblxyXG4gIHJld2luZERyYWc6IC0+XHJcbiAgICBpZiAoQGRyYWdTdGFydFggIT0gbnVsbCkgYW5kIChAZHJhZ1N0YXJ0WSAhPSBudWxsKVxyXG4gICAgICBjb25zb2xlLmxvZyBcIm1vdmluZyAoI3tAZHJhZ1h9LCAje0BkcmFnWX0pIGhvbWUgKCN7QGRyYWdTdGFydFh9LCAje0BkcmFnU3RhcnRZfSlcIlxyXG4gICAgICBAc3dhcENoYWluKEBkcmFnWCwgQGRyYWdZLCBAZHJhZ1N0YXJ0WCwgQGRyYWdTdGFydFkpXHJcbiAgICAgIEBtb3ZlR2VtSG9tZShAZHJhZ1N0YXJ0WCwgQGRyYWdTdGFydFkpXHJcbiAgICAgIEBkcmFnWCA9IEBkcmFnU3RhcnRYXHJcbiAgICAgIEBkcmFnWSA9IEBkcmFnU3RhcnRZXHJcblxyXG4gIGJyZWFrR2VtOiAoeCwgeSkgLT5cclxuICAgIGNvbnNvbGUubG9nIFwiYnJlYWtHZW0oI3t4fSwgI3t5fSlcIlxyXG4gICAgaWYgQGdyaWRbeF1beV0gIT0gbnVsbFxyXG4gICAgICBAZ3JpZFt4XVt5XS5zcHJpdGUuZGVzdHJveSgpXHJcbiAgICAgIEBncmlkW3hdW3ldID0gbnVsbFxyXG4gICAgaWYgKHggPiAwKSBhbmQgKEBncmlkW3gtMV1beV0gIT0gbnVsbClcclxuICAgICAgQGdyaWRbeC0xXVt5XS5zcHJpdGUuZGVzdHJveSgpXHJcbiAgICAgIEBncmlkW3gtMV1beV0gPSBudWxsXHJcbiAgICBpZiAoeCA8IEBncmlkQ1gtMSkgYW5kIChAZ3JpZFt4KzFdW3ldICE9IG51bGwpXHJcbiAgICAgIEBncmlkW3grMV1beV0uc3ByaXRlLmRlc3Ryb3koKVxyXG4gICAgICBAZ3JpZFt4KzFdW3ldID0gbnVsbFxyXG5cclxuICBnZW1BcnRJbmRleDogKHR5cGUsIGhpZ2hsaWdodD1mYWxzZSwgcG93ZXI9MCkgLT5cclxuICAgIGluZGV4ID0gc3dpdGNoIHR5cGVcclxuICAgICAgd2hlbiAwLCAxLCAyLCAzLCA0XHJcbiAgICAgICAgdHlwZVxyXG4gICAgICB3aGVuIDUsIDYsIDdcclxuICAgICAgICA3ICsgKDMgKiAodHlwZSAtIDUpKVxyXG4gICAgaWYgaGlnaGxpZ2h0XHJcbiAgICAgIGluZGV4ICs9IDE2XHJcbiAgICBpbmRleCArPSBwb3dlclxyXG4gICAgcmV0dXJuIGluZGV4XHJcblxyXG4gIGVtaXRTY29yZVBhcnRpY2xlOiAoZ3JpZFgsIGdyaWRZLCB0eXBlLCBzY29yZSkgLT5cclxuICAgIHAgPSBAZ3JpZFRvU2NyZWVuKGdyaWRYLCBncmlkWSlcclxuICAgIHN0eWxlID0geyBmb250OiBcImJvbGQgMTZweCBBcmlhbFwiLCBmaWxsOiBcIiNmZmZcIiwgYm91bmRzQWxpZ25IOiBcImNlbnRlclwiLCBib3VuZHNBbGlnblY6IFwibWlkZGxlXCIgfVxyXG4gICAgdGV4dCA9IEBnYW1lLmFkZC50ZXh0KHAueCwgcC55LCBcIlwiK3Njb3JlLCBzdHlsZSlcclxuICAgIHRleHQuc2V0U2hhZG93KDMsIDMsICdyZ2JhKDAsMCwwLDAuNSknLCAyKVxyXG4gICAgdGV4dC5zZXRUZXh0Qm91bmRzKDAsIDAsIEBnZW1TaXplLCBAZ2VtU2l6ZSk7XHJcbiAgICBAZ2FtZS5hZGQudHdlZW4odGV4dCkudG8oeyB5OiBwLnkgLSAoQGdlbVNpemUgLyA0KSwgYWxwaGE6IDAgfSwgMTAwMCwgUGhhc2VyLkVhc2luZy5RdWFydGljLkluLCB0cnVlKVxyXG4gICAgQGdhbWUuYWRkLnR3ZWVuKHRleHQuc2NhbGUpLnRvKHsgeDogMiwgeTogMiB9LCAxMDAwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKVxyXG4gICAgQGdhbWUudGltZS5ldmVudHMuYWRkIDEwMDAsIC0+XHJcbiAgICAgIHRleHQuZGVzdHJveSgpXHJcblxyXG4gIGJlc3RHZW1Ub1NwYXduOiAtPlxyXG4gICAgIyBUT0RPOiBEZWNpZGUgYmFzZWQgb24gY3VycmVudCBnZW0gZGlzdHJpYnV0aW9uXHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOClcclxuXHJcbiAgbW92ZUdlbUhvbWU6IChneCwgZ3ksIGJvdW5jZT1mYWxzZSkgLT5cclxuICAgIGdlbSA9IEBncmlkW2d4XVtneV1cclxuICAgIGlmIGdlbSA9PSBudWxsXHJcbiAgICAgIHJldHVyblxyXG5cclxuICAgIHggPSBAZ3JpZFggKyAoZ3ggKiBAZ2VtU2l6ZSlcclxuICAgIHkgPSBAZ3JpZFkgKyAoZ3kgKiBAZ2VtU2l6ZSlcclxuICAgIGVhc2luZyA9IFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmVcclxuICAgIHNwZWVkID0gMTAwXHJcbiAgICBpZiBib3VuY2VcclxuICAgICAgZWFzaW5nID0gUGhhc2VyLkVhc2luZy5Cb3VuY2UuT3V0XHJcbiAgICAgIHNwZWVkID0gNDAwXHJcbiAgICBAZ2FtZS5hZGQudHdlZW4oZ2VtLnNwcml0ZSkudG8oeyB4OiB4LCB5OiB5IH0sIHNwZWVkLCBlYXNpbmcsIHRydWUpXHJcblxyXG4gIHNwYXduR2VtczogLT5cclxuICAgICMgZHJvcCBnZW1zIGZyb20gaGlnaGVyIHVwIHNsb3RzIGRvd25cclxuICAgIG5ld0dyaWQgPSBBcnJheShAZ3JpZENYKVxyXG4gICAgZm9yIGkgaW4gWzAuLi5AZ3JpZENYXVxyXG4gICAgICBuZXdHcmlkW2ldID0gQXJyYXkoQGdyaWRDWSlcclxuICAgICAgb2xkSW5kZXggPSBuZXdJbmRleCA9IEBncmlkQ1kgLSAxXHJcbiAgICAgIHdoaWxlIG9sZEluZGV4ID49IDBcclxuICAgICAgICBpZiBAZ3JpZFtpXVtvbGRJbmRleF0gIT0gbnVsbFxyXG4gICAgICAgICAgbmV3R3JpZFtpXVtuZXdJbmRleF0gPSBAZ3JpZFtpXVtvbGRJbmRleF1cclxuICAgICAgICAgIG5ld0luZGV4IC09IDFcclxuICAgICAgICBvbGRJbmRleCAtPSAxXHJcbiAgICAgIHdoaWxlIG5ld0luZGV4ID49IDBcclxuICAgICAgICBuZXdHcmlkW2ldW25ld0luZGV4XSA9IG51bGxcclxuICAgICAgICBuZXdJbmRleCAtPSAxXHJcbiAgICBAZ3JpZCA9IG5ld0dyaWRcclxuXHJcbiAgICAjIHVwZGF0ZSBzcHJpdGVzIGFuZCB4L3lcclxuICAgIGZvciBpIGluIFswLi4uQGdyaWRDWF1cclxuICAgICAgZm9yIGogaW4gWzAuLi5AZ3JpZENZXVxyXG4gICAgICAgIGdlbSA9IEBncmlkW2ldW2pdXHJcbiAgICAgICAgaWYgZ2VtID09IG51bGxcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgaWYgKGdlbS54ICE9IGkpIG9yIChnZW0ueSAhPSBqKVxyXG4gICAgICAgICAgZ2VtLnggPSBpXHJcbiAgICAgICAgICBnZW0ueSA9IGpcclxuICAgICAgICAgIEBtb3ZlR2VtSG9tZShpLCBqLCB0cnVlKVxyXG5cclxuICAgICMgZHJvcCBmcm9tIHRoZSB0b3BcclxuICAgIGZvciBpIGluIFswLi4uQGdyaWRDWF1cclxuICAgICAgZm9yIGogaW4gWzAuLi5AZ3JpZENZXVxyXG4gICAgICAgIGlmIEBncmlkW2ldW2pdID09IG51bGxcclxuICAgICAgICAgIGdlbVR5cGUgPSBAYmVzdEdlbVRvU3Bhd24oKVxyXG4gICAgICAgICAgeCA9IEBncmlkWCArIChpICogQGdlbVNpemUpXHJcbiAgICAgICAgICB5ID0gQGdyaWRZICsgKGogKiBAZ2VtU2l6ZSlcclxuICAgICAgICAgIHNwcml0ZSA9IEBnYW1lLmFkZC5zcHJpdGUoeCwgeSAtIEBncmlkSCwgJ2dlbXMnLCBAZ2VtQXJ0SW5kZXgoZ2VtVHlwZSwgZmFsc2UpKVxyXG4gICAgICAgICAgc3ByaXRlLndpZHRoID0gQGdlbVNpemVcclxuICAgICAgICAgIHNwcml0ZS5oZWlnaHQgPSBAZ2VtU2l6ZVxyXG4gICAgICAgICAgc3ByaXRlLmlucHV0RW5hYmxlZCA9IHRydWVcclxuICAgICAgICAgIEBnYW1lLndvcmxkLnNlbmRUb0JhY2soc3ByaXRlKVxyXG4gICAgICAgICAgQGdhbWUuYWRkLnR3ZWVuKHNwcml0ZSkudG8oeyB5OiB5IH0sIDQwMCwgUGhhc2VyLkVhc2luZy5Cb3VuY2UuT3V0LCB0cnVlKVxyXG4gICAgICAgICAgQGdyaWRbaV1bal0gPVxyXG4gICAgICAgICAgICB4OiBpXHJcbiAgICAgICAgICAgIHk6IGpcclxuICAgICAgICAgICAgdHlwZTogZ2VtVHlwZVxyXG4gICAgICAgICAgICBzcHJpdGU6IHNwcml0ZVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNYXRjaFxyXG4iLCJNYXRjaCA9IHJlcXVpcmUgJy4vTWF0Y2gnXHJcblxyXG5vbkRldmljZVJlYWR5ID0gLT5cclxuICBjb25zb2xlLmxvZygnZGV2aWNlcmVhZHknKVxyXG4gIHdpbmRvdy5tYXRjaCA9IG5ldyBNYXRjaFxyXG5cclxuaW5pdCA9IC0+XHJcbiAgY29uc29sZS5sb2cgXCJpbml0XCJcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsIG9uRGV2aWNlUmVhZHksIGZhbHNlKVxyXG5cclxuaW5pdCgpXHJcbiJdfQ==
